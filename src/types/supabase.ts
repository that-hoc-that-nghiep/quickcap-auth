
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  public: {
    Tables: {
      users: {
        Row: {
          id: string; // UUID
          email: string;
          verified_email: number | null;
          name: string;
          given_name: string;
          family_name: string;
          picture: string;
          locale: string | null;
          subscription: string | null; // FREE, PREMIUM
          timestamp: string; // TEXT (ISO string)
        };
        Insert: {
          id?: string; // UUID (auto-generated by gen_random_uuid())
          email: string;
          verified_email?: number | null;
          name: string;
          given_name: string;
          family_name: string;
          picture: string;
          locale?: string | null;
          subscription?: string | null; // FREE, PREMIUM
          timestamp?: string; // TEXT (auto-generated by CURRENT_TIMESTAMP)
        };
        Update: {
          id?: string; // UUID
          email?: string;
          verified_email?: number | null;
          name?: string;
          given_name?: string;
          family_name?: string;
          picture?: string;
          locale?: string | null;
          subscription?: string | null; // FREE, PREMIUM
          timestamp?: string; // TEXT
        };
        Relationships: [];
      };
      organizations: {
        Row: {
          id: string; // UUID
          name: string;
          image: string;
          type: string; // Organization, Personal
          isDeleted: number; // INTEGER (0 or 1)
          timestamp: string; // TEXT (ISO string)
        };
        Insert: {
          id?: string; // UUID (auto-generated by gen_random_uuid())
          name: string;
          image: string;
          type: string; // Organization, Personal
          isDeleted?: number; // INTEGER (default 0)
          timestamp?: string; // TEXT (auto-generated by CURRENT_TIMESTAMP)
        };
        Update: {
          id?: string; // UUID
          name?: string;
          image?: string;
          type?: string; // Organization, Personal
          isDeleted?: number; // INTEGER (0 or 1)
          timestamp?: string; // TEXT
        };
        Relationships: [];
      };
      user_organization: {
        Row: {
          id: string; // UUID
          user_id: string; // UUID
          org_id: string; // UUID
          is_permission: string; // ALL, READ, UPLOAD
          is_owner: number; // INTEGER (0 or 1)
          timestamp: string; // TEXT (ISO string)
        };
        Insert: {
          id?: string; // UUID (auto-generated by gen_random_uuid())
          user_id: string; // UUID
          org_id: string; // UUID
          is_permission: string; // ALL, READ, UPLOAD
          is_owner?: number; // INTEGER (default 0)
          timestamp?: string; // TEXT (auto-generated by CURRENT_TIMESTAMP)
        };
        Update: {
          id?: string; // UUID
          user_id?: string; // UUID
          org_id?: string; // UUID
          is_permission?: string; // ALL, READ, UPLOAD
          is_owner?: number; // INTEGER (0 or 1)
          timestamp?: string; // TEXT
        };
        Relationships: [
          {
            foreignKeyName: "user_organization_user_id_fkey";
            columns: ["user_id"];
            isOneToOne: false;
            referencedRelation: "users";
            referencedColumns: ["id"];
          },
          {
            foreignKeyName: "user_organization_org_id_fkey";
            columns: ["org_id"];
            isOneToOne: false;
            referencedRelation: "organizations";
            referencedColumns: ["id"];
          },
        ];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

// Utility types để lấy kiểu dữ liệu từ các bảng
type PublicSchema = Database[Extract<keyof Database, "public">];

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never;

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never;

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never;